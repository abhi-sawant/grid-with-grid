@use 'sass:math';

@function rem($value) {
  @return #{math.div($value, 16)}rem;
}

$breakpoints-up: (
  'sm': '36rem',
  'md': '48rem',
  'lg': '64rem',
  'xl': '80rem',
  'xxl': '90rem',
);

@mixin breakpoint($size) {
  @media (min-width: map-get($breakpoints-up, $size)) {
    @content;
  }
}

$spaces: (
  0: '0',
  1: '0.25rem',
  2: '0.5rem',
  3: '0.75rem',
  4: '1rem',
  5: '1.25rem',
  6: '1.5rem',
  7: '1.75rem',
  8: '2rem',
  9: '3rem',
  10: '4rem',
);

@each $space-name, $space-size in $spaces {
  .m-#{$space-name} {
    margin: #{$space-size};
  }
  .mx-#{$space-name} {
    margin-left: #{$space-size};
    margin-right: #{$space-size};
  }
  .my-#{$space-name} {
    margin-top: #{$space-size};
    margin-bottom: #{$space-size};
  }
  .mt-#{$space-name} {
    margin-top: #{$space-size};
  }
  .mr-#{$space-name} {
    margin-right: #{$space-size};
  }
  .mb-#{$space-name} {
    margin-bottom: #{$space-size};
  }
  .ml-#{$space-name} {
    margin-left: #{$space-size};
  }
  .p-#{$space-name} {
    padding: #{$space-size};
  }
  .px-#{$space-name} {
    padding-left: #{$space-size};
    padding-right: #{$space-size};
  }
  .py-#{$space-name} {
    padding-top: #{$space-size};
    padding-bottom: #{$space-size};
  }
  .pt-#{$space-name} {
    padding-top: #{$space-size};
  }
  .pr-#{$space-name} {
    padding-right: #{$space-size};
  }
  .pb-#{$space-name} {
    padding-bottom: #{$space-size};
  }
  .pl-#{$space-name} {
    padding-left: #{$space-size};
  }
}

@each $breakpoint-name, $breakpoint-size in $breakpoints-up {
  @include breakpoint($breakpoint-name) {
    @each $space-name, $space-size in $spaces {
      .m-#{$breakpoint-name}-#{$space-name} {
        margin: #{$space-size};
      }
      .mx-#{$breakpoint-name}-#{$space-name} {
        margin-left: #{$space-size};
        margin-right: #{$space-size};
      }
      .my-#{$breakpoint-name}-#{$space-name} {
        margin-top: #{$space-size};
        margin-bottom: #{$space-size};
      }
      .mt-#{$breakpoint-name}-#{$space-name} {
        margin-top: #{$space-size};
      }
      .mr-#{$breakpoint-name}-#{$space-name} {
        margin-right: #{$space-size};
      }
      .mb-#{$breakpoint-name}-#{$space-name} {
        margin-bottom: #{$space-size};
      }
      .ml-#{$breakpoint-name}-#{$space-name} {
        margin-left: #{$space-size};
      }
      .p-#{$breakpoint-name}-#{$space-name} {
        padding: #{$space-size};
      }
      .px-#{$breakpoint-name}-#{$space-name} {
        padding-left: #{$space-size};
        padding-right: #{$space-size};
      }
      .py-#{$breakpoint-name}-#{$space-name} {
        padding-top: #{$space-size};
        padding-bottom: #{$space-size};
      }
      .pt-#{$breakpoint-name}-#{$space-name} {
        padding-top: #{$space-size};
      }
      .pr-#{$breakpoint-name}-#{$space-name} {
        padding-right: #{$space-size};
      }
      .pb-#{$breakpoint-name}-#{$space-name} {
        padding-bottom: #{$space-size};
      }
      .pl-#{$breakpoint-name}-#{$space-name} {
        padding-left: #{$space-size};
      }
    }
  }
}

.container {
  width: 100%;
  max-width: 100%;
  padding: 0 rem(20);
  margin: 0 auto;
  @each $breakpoint-name, $breakpoint-size in $breakpoints-up {
    @include breakpoint($breakpoint-name) {
      max-width: #{$breakpoint-size};
    }
  }
}

$grid-size: 12 !default;

.row {
  display: grid;
  grid-template-columns: repeat($grid-size, 1fr);
  & > * {
    grid-column: auto / span $grid-size;
  }
  &-autoflow {
    display: grid;
    grid-template-columns: unset;
    grid-auto-flow: column;
  }
}

@each $breakpoint-name, $breakpoint-size in $breakpoints-up {
  @include breakpoint($breakpoint-name) {
    .row-#{$breakpoint-name} {
      display: grid;
      grid-template-columns: repeat($grid-size, 1fr);
      & > * {
        grid-column: auto / span $grid-size;
      }
    }
    .row-autoflow-#{$breakpoint-name} {
      display: grid;
      grid-template-columns: unset;
      grid-auto-flow: column;
    }
  }
}

@for $i from 1 through $grid-size {
  .col-#{$i} {
    grid-column: auto / span #{$i};
  }
  .row-#{$i} {
    grid-row: auto / span #{$i};
  }
}

@for $i from 0 through ($grid-size - 1) {
  .col-offset-#{$i} {
    grid-column-start: #{$i + 1};
  }
  .row-offset-#{$i} {
    grid-row-start: #{$i + 1};
  }
}

.col-offset-none {
  grid-column-start: auto;
}

.row-offset-none {
  grid-row-start: auto;
}

@each $breakpoint-name, $breakpoint-size in $breakpoints-up {
  @include breakpoint($breakpoint-name) {
    @for $i from 1 through $grid-size {
      .col-#{$breakpoint-name}-#{$i} {
        grid-column-end: span #{$i};
      }
      .row-#{$breakpoint-name}-#{$i} {
        grid-row-end: span #{$i};
      }
    }
    @for $j from 0 through ($grid-size - 1) {
      .col-offset-#{$breakpoint-name}-#{$j} {
        grid-column-start: #{$j + 1};
      }
      .row-offset-#{$breakpoint-name}-#{$j} {
        grid-row-start: #{$j + 1};
      }
    }
    .col-offset-#{$breakpoint-name}-none {
      grid-column-start: auto;
    }
    .row-offset-#{$breakpoint-name}-none {
      grid-row-start: auto;
    }
  }
}

$gaps: (
  0: '0',
  1: '0.25rem',
  2: '0.5rem',
  3: '0.75rem',
  4: '1rem',
  5: '1.25rem',
  6: '1.5rem',
  7: '1.75rem',
  8: '2rem',
);

@each $gap-name, $gap-size in $gaps {
  .g-#{$gap-name} {
    gap: #{$gap-size};
  }
  .gx-#{$gap-name} {
    column-gap: #{$gap-size};
  }
  .gy-#{$gap-name} {
    row-gap: #{$gap-size};
  }
}

@each $breakpoint-name, $breakpoint-size in $breakpoints-up {
  @include breakpoint($breakpoint-name) {
    @each $gap-name, $gap-size in $gaps {
      .g-#{$breakpoint-name}-#{$gap-name} {
        gap: #{$gap-size};
      }
      .gx-#{$breakpoint-name}-#{$gap-name} {
        column-gap: #{$gap-size};
      }
      .gy-#{$breakpoint-name}-#{$gap-name} {
        row-gap: #{$gap-size};
      }
    }
  }
}

$align-items-values: 'center', 'start', 'end', 'stretch', 'baseline';
$align-content-values: 'center', 'space-between', 'space-around', 'space-evenly', 'stretch';
$justify-items-values: 'center', 'start', 'end', 'stretch';
$justify-content-values: 'center', 'start', 'end', 'space-between', 'space-around', 'space-evenly';

@each $align-items-value in $align-items-values {
  .align-items-#{$align-items-value} {
    align-items: #{$align-items-value};
  }
}

@each $align-content-value in $align-content-values {
  .align-content-#{$align-content-value} {
    align-content: #{$align-content-value};
  }
}

@each $justify-items-value in $justify-items-values {
  .justify-items-#{$justify-items-value} {
    justify-items: #{$justify-items-value};
  }
}

@each $justify-content-value in $justify-content-values {
  .justify-content-#{$justify-content-value} {
    justify-content: #{$justify-content-value};
  }
}

@each $breakpoint-name, $breakpoint-size in $breakpoints-up {
  @include breakpoint($breakpoint-name) {
    @each $align-items-value in $align-items-values {
      .align-items-#{$breakpoint-name}-#{$align-items-value} {
        align-items: #{$align-items-value};
      }
    }
    @each $align-content-value in $align-content-values {
      .align-content-#{$breakpoint-name}-#{$align-content-value} {
        align-content: #{$align-content-value};
      }
    }
    @each $justify-items-value in $justify-items-values {
      .justify-items-#{$breakpoint-name}-#{$justify-items-value} {
        justify-items: #{$justify-items-value};
      }
    }
    @each $justify-content-value in $justify-content-values {
      .justify-content-#{$breakpoint-name}-#{$justify-content-value} {
        justify-content: #{$justify-content-value};
      }
    }
  }
}
